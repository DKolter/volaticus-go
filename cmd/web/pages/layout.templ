package pages

import (
	"volaticus-go/cmd/web/components"
	userctx "volaticus-go/internal/context"
)

templ Base() {
	<!DOCTYPE html>
	<html lang="en" class="h-full bg-gray-800">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Volaticus</title>
			// TODO: Update meta tags, possibly use a helper function to generate them
			<meta name="description" content="Volaticus - A powerful file sharing and URL shortening platform. Upload files, create short URLs, track analytics, and manage your digital content with ease."/>
			<meta property="og:title" content="Volaticus - File Sharing & URL Shortening"/>
			<meta property="og:description" content="Securely upload files, create custom short URLs, and track engagement with comprehensive analytics. Features include custom URLs, QR code generation, and expiring links."/>
			//<meta property="og:image" content="/assets/volaticus-share.png"/>
			//<meta property="og:url" content="PLACEHOLDER"/>
			<meta name="twitter:card" content="summary_large_image"/>
			<meta name="twitter:title" content="Volaticus - File Sharing & URL Shortening"/>
			<meta name="twitter:description" content="Securely upload files, create custom short URLs, and track engagement with comprehensive analytics. Features include custom URLs, QR code generation, and expiring links."/>
			// <meta name="twitter:image" content="/assets/volaticus-share.png"/> // TODO: Create a share image
			<script src="assets/js/htmx.min.js"></script>
			<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.js"></script>
			<script src="https://unpkg.com/htmx.org/dist/ext/json-enc.js"></script>
			<link href="assets/css/output.css" rel="stylesheet"/>
			<link rel="icon" href="assets/favicon.ico"/>
		</head>
		<body class="h-full">
			{ children... }
			<script>
                function showToast(message, type = 'success', duration = 3000) {
                    // Create container if it doesn't exist
                    let container = document.getElementById('toast-container');
                    if (!container) {
                        container = document.createElement('div');
                        container.id = 'toast-container';
                        container.className = 'fixed bottom-4 right-4 z-50 flex flex-col gap-2';
                        document.body.appendChild(container);
                    }

                    const toast = document.createElement('div');
                    toast.className = `transform transition-all duration-300 translate-x-full`;

                    // Set background color based on type
                    let bgColor = 'bg-gray-800';
                    let textColor = 'text-white';
                    let borderColor = 'border-gray-700';

                    switch (type) {
                        case 'success':
                            borderColor = 'border-green-500';
                            break;
                        case 'error':
                            borderColor = 'border-red-500';
                            break;
                        case 'warning':
                            borderColor = 'border-yellow-500';
                            break;
                        case 'info':
                            borderColor = 'border-blue-500';
                            break;
                    }

                    toast.innerHTML = `
                        <div class="px-4 py-2 rounded-lg shadow-lg border-l-4 ${bgColor} ${textColor} ${borderColor}">
                            <p class="text-sm font-medium">${message}</p>
                        </div>
                    `;

                    container.appendChild(toast);

                    // Trigger animation
                    requestAnimationFrame(() => {
                        toast.classList.remove('translate-x-full');
                        toast.classList.add('translate-x-0');
                    });

                    // Remove toast after duration
                    setTimeout(() => {
                        toast.classList.remove('translate-x-0');
                        toast.classList.add('translate-x-full');

                        // Remove element after animation
                        setTimeout(() => {
                            if (container.contains(toast)) {
                                container.removeChild(toast);
                            }
                            // Remove container if empty
                            if (container.children.length === 0) {
                                container.remove();
                            }
                        }, 300);
                    }, duration);
                }
            </script>
		</body>
	</html>
}

templ AuthLayout() {
	@Base() {
		<div class="flex min-h-full flex-col justify-center px-6 py-12 lg:px-8">
			{ children... }
		</div>
	}
}

templ DashboardLayout() {
	@Base() {
		<div class="min-h-full">
			<div class="fixed inset-y-0 z-50 flex flex-col w-16 lg:w-72 transition-width duration-300">
				<div class="flex grow flex-col gap-y-5 overflow-y-auto bg-gray-900 px-2 lg:px-6 pb-4">
					<div class="h-24 flex-none flex flex-col justify-center items-center border-b border-gray-800">
						<h1 class="text-white text-2xl font-bold hidden lg:block">Volaticus</h1>
						<h1 class="text-white text-xl font-bold lg:hidden">V</h1>
						if user := userctx.GetUserFromContext(ctx); user != nil {
							<p class="text-gray-400 text-sm mt-1 hidden lg:block">Welcome, { user.Username }</p>
							<p class="text-gray-400 text-sm mt-1 lg:hidden">{ user.Username[:1] }</p>
						}
					</div>
					@components.NavList()
				</div>
			</div>
			<main class="lg:pl-72 pl-16">
				<div class="px-4 sm:px-6 lg:px-8">
					{ children... }
				</div>
			</main>
		</div>
	}
}
