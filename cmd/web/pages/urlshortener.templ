package pages

import (
    "encoding/json"
    "fmt"
    "time"
    "volaticus-go/internal/shortener"
)

// Main URL Shortener page
templ UrlShortPage() {
	@DashboardLayout() {
		<div class="px-4 py-6 sm:px-0">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-semibold text-white">URL Shortener</h1>
				<div class="text-sm text-gray-400">
					Create and manage your shortened URLs
				</div>
			</div>
			<!-- URL Shortening Form -->
			<div class="max-w-2xl mb-8 bg-gray-800 rounded-lg p-6">
				<form
					class="space-y-4"
					hx-post="/api/urls/shorten"
					hx-target="#shortener-result"
					hx-swap="innerHTML"
				>
					<div>
						<label for="url" class="block text-sm font-medium leading-6 text-gray-300">
							Enter URL to shorten
						</label>
						<div class="mt-2">
							<input
								type="url"
								name="url"
								id="url"
								required
								placeholder="https://example.com/very/long/url/that/needs/shortening"
								class="block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
							/>
						</div>
					</div>
					<!-- Custom URL Input -->
					<div>
						<label for="vanity_code" class="block text-sm font-medium leading-6 text-gray-300">
							Custom URL (optional)
						</label>
						<div class="mt-2">
							<div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10">
								<span class="flex select-none items-center pl-3 text-gray-400 sm:text-sm">/</span>
								<input
									type="text"
									name="vanity_code"
									id="vanity_code"
									placeholder="my-custom-url"
									pattern="[a-zA-Z0-9\-_]+"
									class="block flex-1 border-0 bg-transparent py-1.5 pl-1 text-white focus:ring-0 sm:text-sm sm:leading-6"
								/>
							</div>
							<p class="mt-1 text-sm text-gray-500">
								Only letters, numbers, hyphens, and underscores allowed
							</p>
						</div>
					</div>
					<!-- Expiration Date -->
					<div>
						<label for="expires_at" class="block text-sm font-medium leading-6 text-gray-300">
							Expiration Date (optional)
						</label>
						<div class="mt-2">
							<input
								type="datetime-local"
								name="expires_at"
								id="expires_at"
								min={ time.Now().Format("2006-01-02T15:04") }
								class="block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
							/>
						</div>
						<p class="mt-1 text-sm text-gray-500">
							Leave empty for a permanent URL
						</p>
					</div>
					<button
						type="submit"
						class="w-full rounded-md bg-indigo-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"
					>
						Shorten URL
					</button>
				</form>
				<!-- Results will be inserted here -->
				<div id="shortener-result"></div>
			</div>
			<!-- My URLs Section -->
			<div class="mt-10">
				<div class="flex justify-between items-center mb-4">
					<h2 class="text-xl font-semibold text-white">My URLs</h2>
					<button
						hx-get="/url-short/list"
						hx-target="#my-urls"
						hx-trigger="click"
						class="text-sm text-indigo-400 hover:text-indigo-300"
					>
						Refresh List
					</button>
				</div>
				<div
					id="my-urls"
					hx-get="/url-short/list"
					hx-trigger="load,urlsChanged from:body"
					class="space-y-4"
				>
					<!-- URLs will be loaded here -->
				</div>
			</div>
			<!-- Analytics Modal Container -->
			<div id="analytics-modal"></div>
		</div>
	}
}

// URL List Component
templ URLList(urls []*shortener.ShortenedURL) {
	if len(urls) == 0 {
		<div class="bg-gray-800 rounded-lg p-6 text-gray-400 text-center">
			<p>No URLs created yet.</p>
			<p class="mt-2 text-sm">Create your first shortened URL using the form above.</p>
		</div>
	} else {
		<div class="overflow-hidden bg-gray-800 shadow rounded-lg">
			<table class="min-w-full divide-y divide-gray-700">
				<thead>
					<tr>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Shortened URL
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Original URL
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Clicks
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Created
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Expires
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Actions
						</th>
					</tr>
				</thead>
				<tbody class="divide-y divide-gray-700">
					for _, url := range urls {
						<tr>
							<td class="px-6 py-4 whitespace-nowrap text-sm">
								<div class="flex items-center">
									<a
										href={ templ.SafeURL("/" + url.ShortCode) }
										target="_blank"
										class="text-indigo-400 hover:text-indigo-300 mr-2"
									>
										/{ url.ShortCode }
									</a>
									<button
										onclick={ copyToClipboard(url.ShortCode) }
										class="text-gray-400 hover:text-gray-300"
										title="Copy to clipboard"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
										</svg>
									</button>
								</div>
							</td>
							<td class="px-6 py-4 text-sm text-gray-300">
								<div class="max-w-xs truncate" title={ url.OriginalURL }>
									{ url.OriginalURL }
								</div>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								{ fmt.Sprint(url.AccessCount) }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								{ url.CreatedAt.Format("2006-01-02") }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm">
								if url.ExpiresAt == nil {
									<span class="text-green-500">Never</span>
								} else if time.Now().After(*url.ExpiresAt) {
									<span class="text-red-500">Expired</span>
								} else {
									<span class="text-gray-300">{ url.ExpiresAt.Format("2006-01-02 15:04") }</span>
								}
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								<div class="flex items-center space-x-3">
									<button
										hx-get={ fmt.Sprintf("/api/urls/%s", url.ID) }
										hx-target="#analytics-modal"
										class="text-indigo-400 hover:text-indigo-300"
										title="View Analytics"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
										</svg>
									</button>
									<button
										hx-delete={ fmt.Sprintf("/api/urls/%s", url.ID) }
										hx-confirm="Are you sure you want to delete this URL?"
										hx-target="closest tr"
										hx-swap="outerHTML swap:1s"
										class="text-red-400 hover:text-red-300"
										title="Delete URL"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

// Analytics Modal Component
templ AnalyticsModal(analytics *shortener.URLAnalytics) {
	<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
		<div class="bg-gray-800 rounded-lg p-6 w-full max-w-4xl">
			<div class="flex justify-between items-center mb-6">
				<h3 class="text-xl font-semibold text-white">URL Analytics</h3>
				<button
					onclick="this.closest('.fixed').remove()"
					class="text-gray-400 hover:text-white"
				>
					<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
			<!-- URL Info -->
			<div class="mb-6 p-4 bg-gray-700 rounded-lg">
				<div class="text-sm text-gray-400 mb-1">Original URL</div>
				<div class="text-white break-all">{ analytics.URL.OriginalURL }</div>
			</div>
			<!-- Analytics Overview -->
			<div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
				<div class="bg-gray-700 rounded-lg p-4">
					<div class="text-sm text-gray-400">Total Clicks</div>
					<div class="text-2xl text-white">{ fmt.Sprint(analytics.TotalClicks) }</div>
				</div>
				<div class="bg-gray-700 rounded-lg p-4">
					<div class="text-sm text-gray-400">Unique Visitors</div>
					<div class="text-2xl text-white">{ fmt.Sprint(analytics.UniqueClicks) }</div>
				</div>
				<div class="bg-gray-700 rounded-lg p-4">
					<div class="text-sm text-gray-400">Last Click</div>
					<div class="text-2xl text-white">
						if analytics.URL.LastAccessedAt != nil {
							{ analytics.URL.LastAccessedAt.Format("2006-01-02 15:04") }
						} else {
							Never
						}
					</div>
				</div>
			</div>
			<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
				<!-- Top Referrers -->
				<div>
					<h4 class="text-sm font-medium text-gray-400 mb-2">Top Referrers</h4>
					<div class="bg-gray-700 rounded-lg p-4">
						if len(analytics.TopReferrers) == 0 {
							<div class="text-gray-400">No referrer data available</div>
						} else {
							for _, ref := range analytics.TopReferrers {
								<div class="flex justify-between items-center py-1">
									<span class="text-gray-300 truncate max-w-xs" title={ ref.Referrer }>
										{ ref.Referrer }
									</span>
									<span class="text-gray-400 ml-2">{ fmt.Sprint(ref.Count) }</span>
								</div>
							}
						}
					</div>
				</div>
				<!-- Top Countries -->
				<div>
					<h4 class="text-sm font-medium text-gray-400 mb-2">Top Countries</h4>
					<div class="bg-gray-700 rounded-lg p-4">
						if len(analytics.TopCountries) == 0 {
							<div class="text-gray-400">No country data available</div>
						} else {
							for _, country := range analytics.TopCountries {
								<div class="flex justify-between items-center py-1">
									<span class="text-gray-300">{ country.CountryCode }</span>
									<span class="text-gray-400">{ fmt.Sprint(country.Count) }</span>
								</div>
							}
						}
					</div>
				</div>
			</div>
			<!-- Daily Clicks Chart -->
            <div class="mt-6">
                <h4 class="text-sm font-medium text-gray-400 mb-2">Clicks Over Time</h4>
                <div class="bg-gray-700 rounded-lg p-4">
                    if len(analytics.ClicksByDay) == 0 {
                        <div class="text-gray-400">No click data available</div>
                    } else {
                        <div class="h-48">
                            <div id="clicks-chart" class="w-full h-full"></div>
                        </div>
                    }
                </div>
            </div>
			<!-- Update Expiration -->
			<div class="mt-6 pt-6 border-t border-gray-700">
                <h4 class="text-sm font-medium text-gray-400 mb-2">Update Expiration</h4>
                <form
                    class="flex gap-4 items-center"
                    hx-put={ fmt.Sprintf("/api/urls/%s/expiration", analytics.URL.ID) }
                    hx-swap="none"
                    hx-on="htmx:afterRequest: if(event.detail.successful) {
                        showToast('Expiration updated successfully');
                        htmx.trigger('#my-urls', 'urlsChanged');
                    }"
                >
                    <input
                        type="datetime-local"
                        name="expires_at"
                        class="flex-1 rounded-md border-0 bg-gray-600 px-3 py-1.5 text-white shadow-sm ring-1 ring-inset ring-gray-500 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm"
                        if analytics.URL.ExpiresAt != nil {
                            value={ analytics.URL.ExpiresAt.Format("2006-01-02T15:04") }
                        }
                        min={ time.Now().Format("2006-01-02T15:04") }
                    />
                    <button
                        type="submit"
                        class="px-3 py-2 text-sm font-semibold text-white bg-indigo-600 hover:bg-indigo-500 rounded-md"
                    >
                        Update
                    </button>
                    <button
                        type="button"
                        hx-put={ fmt.Sprintf("/api/urls/%s/expiration", analytics.URL.ID) }
                        hx-swap="none"
                        hx-on="htmx:afterRequest: if(event.detail.successful) {
                            showToast('Expiration removed successfully');
                            htmx.trigger('#my-urls', 'urlsChanged');
                        }"
                        class="px-3 py-2 text-sm font-semibold text-gray-300 hover:text-white"
                    >
                        Remove Expiration
                    </button>
                </form>
            </div>
		</div>
	</div>
}

// JavaScript functions for the template

script copyToClipboard(shortCode string) {
    const url = window.location.origin + "/" + shortCode;
    navigator.clipboard.writeText(url).then(() => {
        showToast('URL copied to clipboard');
    });
}

func formatClicksDataToJSON(data []shortener.ClicksByDay) string {
    jsonData, err := json.Marshal(data)
    if err != nil {
        return "[]"
    }
    return string(jsonData)
}

script showToast(message string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
            toast.remove();
        }, 300);
    }, 3000);
}
