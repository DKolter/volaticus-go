package pages

import (
	"encoding/json"
	"fmt"
	"time"
	"volaticus-go/internal/common/models"
)

// Main URL Shortener page
templ UrlShortPage() {
	@DashboardLayout() {
		<div class="px-4 py-6 sm:px-0">
			<div class="flex justify-between items-center mb-6">
				<h1 class="text-2xl font-semibold text-white">URL Shortener</h1>
				<div class="text-sm text-gray-400">
					Create and manage your shortened URLs
				</div>
			</div>
			<!-- URL Shortening Form -->
			<div class="max-w-2xl mb-8 bg-gray-800 rounded-lg p-6">
				<form
					class="space-y-4"
					hx-post="/url-shortener/urls/shorten"
					hx-target="#shortener-result"
					hx-swap="innerHTML"
				>
					<div>
						<label for="url" class="block text-sm font-medium leading-6 text-gray-300">
							Enter URL to shorten
						</label>
						<div class="mt-2">
							<input
								type="url"
								name="url"
								id="url"
								required
								placeholder="https://example.com/very/long/url/that/needs/shortening"
								class="block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
							/>
						</div>
					</div>
					<!-- Custom URL Input -->
					<div>
						<label for="vanity_code" class="block text-sm font-medium leading-6 text-gray-300">
							Custom URL (optional)
						</label>
						<div class="mt-2">
							<div class="flex rounded-md bg-white/5 ring-1 ring-inset ring-white/10">
								<span class="flex select-none items-center pl-3 text-gray-400 sm:text-sm">/s/</span>
								<input
									type="text"
									name="vanity_code"
									id="vanity_code"
									placeholder="my-custom-url"
									pattern="[a-zA-Z0-9\-_]+"
									class="block flex-1 border-0 bg-transparent py-1.5 pl-1 text-white focus:ring-0 sm:text-sm sm:leading-6"
								/>
							</div>
							<p class="mt-1 text-sm text-gray-500">
								Only letters, numbers, hyphens, and underscores allowed
							</p>
						</div>
					</div>
					<!-- Expiration Date -->
					<div>
						<label for="expires_at" class="block text-sm font-medium leading-6 text-gray-300">
							Expiration Date (optional)
						</label>
						<div class="mt-2">
							<input
								type="datetime-local"
								name="expires_at"
								id="expires_at"
								min={ time.Now().Format("2006-01-02T15:04") }
								class="block w-full rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6"
								step="60"
							/>
							<script>
                                document.getElementById('expires_at').addEventListener('change', function(e) {
                                    const date = new Date(e.target.value);
                                    // Ensure we're working with local time
                                    const localISOTime = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                                        .toISOString()
                                        .slice(0, 16);
                                    e.target.value = localISOTime;
                                });
                            </script>
						</div>
						<p class="mt-1 text-sm text-gray-500">
							Leave empty for a permanent URL
						</p>
					</div>
					<button
						type="submit"
						class="w-full rounded-md bg-indigo-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500"
					>
						Shorten URL
					</button>
				</form>
				<!-- Results will be inserted here -->
				<div id="shortener-result"></div>
			</div>
			<!-- My URLs Section -->
			<div class="mt-10">
				<div class="flex justify-between items-center mb-4">
					<h2 class="text-xl font-semibold text-white">My URLs</h2>
					<button
						hx-get="/url-shortener/list"
						hx-target="#my-urls"
						hx-trigger="click"
						class="text-sm text-indigo-400 hover:text-indigo-300"
					>
						Refresh List
					</button>
				</div>
				<div
					id="my-urls"
					hx-get="/url-shortener/list"
					hx-trigger="load,urlsChanged from:body"
					class="space-y-4"
				>
					<!-- URLs will be loaded here -->
				</div>
			</div>
			<!-- Analytics Modal Container -->
			<div id="analytics-modal"></div>
		</div>
	}
}

// URL List Component
templ URLList(urls []*models.ShortenedURL) {
	if len(urls) == 0 {
		<div class="bg-gray-800 rounded-lg p-6 text-gray-400 text-center">
			<p>No URLs created yet.</p>
			<p class="mt-2 text-sm">Create your first shortened URL using the form above.</p>
		</div>
	} else {
		<div class="overflow-hidden bg-gray-800 shadow rounded-lg">
			<table class="min-w-full divide-y divide-gray-700">
				<thead>
					<tr>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Shortened URL
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Original URL
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Clicks
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Created
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Expires
						</th>
						<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">
							Actions
						</th>
					</tr>
				</thead>
				<tbody class="divide-y divide-gray-700">
					for _, url := range urls {
						<tr hx-confirm="" class="hover:bg-gray-700">
							<td class="px-6 py-4 whitespace-nowrap text-sm">
								<div class="flex items-center">
									<a
										href={ templ.SafeURL("/s/" + url.ShortCode) }
										target="_blank"
										class="text-indigo-400 hover:text-indigo-300 mr-2"
									>
										/s/{ url.ShortCode }
									</a>
									<button
										onclick={ copyToClipboard(url.ShortCode) }
										class="text-gray-400 hover:text-gray-300"
										title="Copy to clipboard"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"></path>
										</svg>
									</button>
									<button
										onclick={ showQRCode(url.ShortCode) }
										class="text-gray-400 hover:text-gray-300 ml-2"
										title="Show QR Code"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
										</svg>
									</button>
								</div>
							</td>
							<td class="px-6 py-4 text-sm text-gray-300">
								<div class="max-w-xs truncate" title={ url.OriginalURL }>
									{ url.OriginalURL }
								</div>
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								{ fmt.Sprint(url.AccessCount) }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								{ url.CreatedAt.Format("2006-01-02") }
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm">
								if url.ExpiresAt == nil {
									<span class="text-green-500">Never</span>
								} else if time.Now().After(*url.ExpiresAt) {
									<span class="text-red-500">Expired</span>
								} else {
									<span class="text-gray-300">{ url.ExpiresAt.Format("2006-01-02 15:04") }</span>
								}
							</td>
							<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">
								<div class="flex items-center space-x-3">
									<button
										hx-get={ fmt.Sprintf("/url-shortener/urls/%s", url.ID) }
										hx-target="#analytics-modal"
										class="text-indigo-400 hover:text-indigo-300"
										title="View Analytics"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
										</svg>
									</button>
									<button
										hx-delete={ fmt.Sprintf("/url-shortener/urls/%s", url.ID) }
										hx-confirm="Are you sure you want to delete this URL?"
										hx-target="closest tr"
										hx-swap="outerHTML swap:1s"
										class="text-red-400 hover:text-red-300"
										title="Delete URL"
									>
										<svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
		<!-- QR Code Modal Container -->
		<div id="qr-modal-container"></div>
	}
}

// Shortened URL Result Component
templ ShortenedURLResult(response *models.CreateURLResponse) {
	<div class="mt-4 p-4 bg-gray-800 rounded-lg border border-gray-700">
		<p class="text-gray-300">Your shortened URL:</p>
		<div class="mt-2 flex items-center gap-2">
			<label>
				<input
					type="text"
					readonly
					value={ response.ShortURL }
					class="flex-1 rounded-md border-0 bg-white/5 py-1.5 text-white shadow-sm ring-1 ring-inset ring-white/10"
				/>
			</label>
			<button
				onclick={ copyToClipboard(response.ShortCode) }
				class="rounded-md bg-indigo-500 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400"
			>
				Copy
			</button>
		</div>
		if response.ExpiresAt != nil {
			<p class="mt-2 text-sm text-gray-400">
				This URL will expire on { response.ExpiresAt.Format("January 2, 2006 at 15:04 MST") }
			</p>
		}
	</div>
}

// Error Result Component
templ ErrorResult(message string) {
	<div class="mt-4">
		<p class="text-red-400">{ message }</p>
	</div>
}

// JavaScript functions for the template

script copyToClipboard(shortCode string) {
    const url = window.location.origin + "/s/" + shortCode;
    navigator.clipboard.writeText(url).then(() => {
        showToast('URL copied to clipboard', 'success');
    }).catch(() => {
        showToast('Failed to copy URL', 'error');
    });
}

func formatClicksDataToJSON(data []models.ClicksByDay) string {
	jsonData, err := json.Marshal(data)
	if err != nil {
		return "[]"
	}
	return string(jsonData)
}

script showToast(message string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-gray-800 text-white px-4 py-2 rounded shadow-lg transition-opacity duration-300';
    toast.textContent = message;
    document.body.appendChild(toast);
    setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
            toast.remove();
        }, 300);
    }, 3000);
}

script showQRCode(shortCode string) {
    const url = window.location.origin + "/s/" + shortCode;
    const qrModal = document.createElement('div');
    qrModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    qrModal.innerHTML = `
        <div class="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-semibold text-white">QR Code</h3>
                <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-white">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="flex justify-center">
                <img src="https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(url)}"
                     alt="QR Code"
                     class="w-48 h-48 bg-white p-2 rounded"
                />
            </div>
            <p class="mt-4 text-sm text-center text-gray-400">
                Scan this code to open the shortened URL
            </p>
        </div>
    `;
    document.body.appendChild(qrModal);
}
