package components

import (
	"fmt"
	"time"
	"volaticus-go/internal/common/models"
)

templ TokenTable(tokens []*models.APIToken) {
	<div class="border border-gray-700 rounded-lg overflow-hidden">
		<table class="min-w-full divide-y divide-gray-700">
			<thead class="bg-gray-700">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Name</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase w-2/5">Token</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Created</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Last Used</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase">Actions</th>
				</tr>
			</thead>
			<tbody>
				for _, token := range tokens {
					<tr class="border-b border-gray-700">
						<td class="px-6 py-4 text-sm text-gray-300">{ token.Name }</td>
						<td class="px-6 py-4">
							<div class="flex items-center gap-2">
								<input
									type="password"
									type="password"
									value=" { token.Token }"
									class="bg-gray-700 px-2 py-1 rounded font-mono text-gray-300 flex-1"
								/>
								<button
									onclick={ copyToClipboard(token.Token) }
									class="text-gray-400 hover:text-gray-200"
								>
									@ClipboardIcon()
								</button>
							</div>
						</td>
						<td class="px-6 py-4 text-sm text-gray-300">
							@formatDateTime(&token.CreatedAt)
						</td>
						<td class="px-6 py-4 text-sm text-gray-300">
							@formatDateTime(token.LastUsedAt)
						</td>
						<td class="px-6 py-4">
							<button
								class="text-red-400 hover:text-red-300"
								hx-delete={ "/settings/token/" + fmt.Sprintf("%v", token.Token) }
								hx-confirm="Are you sure you want to delete this token?"
							>
								Delete
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

script copyToClipboard(text string) {
		navigator.clipboard.writeText(text).then(() => {
		console.log('Token copied to clipboard');
	});
}

templ formatDateTime(t *time.Time) {
	if t == nil {
		Never
	} else {
		{ t.Format("2006-01-02") }
	}
}
